1.原型与原型链的关系是什么？（什么是原型什么是原型链）

原型链是实例化对象与构造函数原型的桥梁
函数中的一个属性 -> 原型（性能问题）
对象中都有原型链


2.new与不new的区别

函数内部的this指向实例化对象
默认return this, 手动添加返回值，是否为对象类型，是就走对象否则走this
可以不加括号就能运行函数

 

3.用ES6的面向对象描述一个人和警察
class Person {
	constructor(name,age){
		this.name = name;
		this.age = age
	}
	say(){
		alert(this.name)
	}
}
class PoliceMan extends Person {
	constructor(name,age,job){
		super(name,age);
		this.job = ‘警察’;
	}
	say(){
		alert(this.job)
	}
	
	fn(){
		alert('中国功夫!')
		function ff(){console.log(this)} ff();
	}
}

const p = new Person('李小龙',100);
const p2 = new PoliceMan('李小龙',100);
p.say();
p2.fn();


4.箭头函数的写法

let fn = a => a;
let fn = (a,b) => {return a+b}

5.如何判断一个数组？
Object.prototype.toString.call(arr) === '[object Array]'


6.原型继承的原理是什么？

因为实例化对象上如果没有某个方法，那么会去这个对象下的构造函数的原型下去找该方法
只要让这个原型有这个的方法即可，但是又知道对象的赋值为赋址，所以不能把父类的原型
直接赋值给子类，但是父类的实例化对象不等于父类原型的对象，这个时候赋值即
可以继承，修改子类也不会改变父类的继承方式

7.深度克隆的原理

循环对象中的每个值,查看是否为对象类型，如果这个值是对象类型就继续循环这个对象中的每个值
直到不为对象类型为止，就把每个值赋值给另一个对象，达到深度克隆的目的。


8.学完面向对象之后你的真实感觉如何？
